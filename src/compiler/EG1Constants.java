/* Generated By:JavaCC: Do not edit this line. EG1Constants.java */
package compiler;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface EG1Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int UnicodeLetter = 7;
  /** RegularExpression Id. */
  int UnicodeDigit = 8;
  /** RegularExpression Id. */
  int DecimalDigit = 9;
  /** RegularExpression Id. */
  int NonZeroDigit = 10;
  /** RegularExpression Id. */
  int DecimalDigits = 11;
  /** RegularExpression Id. */
  int ExponentIndicator = 12;
  /** RegularExpression Id. */
  int SignedInteger = 13;
  /** RegularExpression Id. */
  int ExponentPart = 14;
  /** RegularExpression Id. */
  int DecimalIntegerLiteral = 15;
  /** RegularExpression Id. */
  int DecimalLiteral = 16;
  /** RegularExpression Id. */
  int HexDigit = 17;
  /** RegularExpression Id. */
  int HexIntegerLiteral = 18;
  /** RegularExpression Id. */
  int IdentifierStart = 19;
  /** RegularExpression Id. */
  int IdentifierPart = 20;
  /** RegularExpression Id. */
  int SingleStringCharacter = 21;
  /** RegularExpression Id. */
  int DoubleStringCharacter = 22;
  /** RegularExpression Id. */
  int SingleStringCharacters = 23;
  /** RegularExpression Id. */
  int DoubleStringCharacters = 24;
  /** RegularExpression Id. */
  int PLUS = 25;
  /** RegularExpression Id. */
  int MIN = 26;
  /** RegularExpression Id. */
  int MULT = 27;
  /** RegularExpression Id. */
  int DIV = 28;
  /** RegularExpression Id. */
  int MOD = 29;
  /** RegularExpression Id. */
  int INCREMENT = 30;
  /** RegularExpression Id. */
  int DECREMENT = 31;
  /** RegularExpression Id. */
  int OPENBRACET = 32;
  /** RegularExpression Id. */
  int CLOSEBRACET = 33;
  /** RegularExpression Id. */
  int COMMA = 34;
  /** RegularExpression Id. */
  int Exclamation = 35;
  /** RegularExpression Id. */
  int Ampersand = 36;
  /** RegularExpression Id. */
  int Period = 37;
  /** RegularExpression Id. */
  int Less = 38;
  /** RegularExpression Id. */
  int Equals = 39;
  /** RegularExpression Id. */
  int Greater = 40;
  /** RegularExpression Id. */
  int Question = 41;
  /** RegularExpression Id. */
  int Colon = 42;
  /** RegularExpression Id. */
  int OpeningBracket = 43;
  /** RegularExpression Id. */
  int ClosingBracket = 44;
  /** RegularExpression Id. */
  int Caret = 45;
  /** RegularExpression Id. */
  int OpeningBrace = 46;
  /** RegularExpression Id. */
  int ClosingBrace = 47;
  /** RegularExpression Id. */
  int VerticalBar = 48;
  /** RegularExpression Id. */
  int Tilde = 49;
  /** RegularExpression Id. */
  int LessEquals = 50;
  /** RegularExpression Id. */
  int GreaterEquals = 51;
  /** RegularExpression Id. */
  int EqualsEquals = 52;
  /** RegularExpression Id. */
  int ExclamationEquals = 53;
  /** RegularExpression Id. */
  int EqualsEqualsEquals = 54;
  /** RegularExpression Id. */
  int ExclamationEqualsEquals = 55;
  /** RegularExpression Id. */
  int SHIFTLEFT = 56;
  /** RegularExpression Id. */
  int SHIFTRIGHT = 57;
  /** RegularExpression Id. */
  int SHIFTRIGHTT = 58;
  /** RegularExpression Id. */
  int AND = 59;
  /** RegularExpression Id. */
  int OR = 60;
  /** RegularExpression Id. */
  int PLUSEquals = 61;
  /** RegularExpression Id. */
  int MINEquals = 62;
  /** RegularExpression Id. */
  int MULTEquals = 63;
  /** RegularExpression Id. */
  int MODEquals = 64;
  /** RegularExpression Id. */
  int DIVEquals = 65;
  /** RegularExpression Id. */
  int SHIFTLEFTEquals = 66;
  /** RegularExpression Id. */
  int SHIFTRIGHTEquals = 67;
  /** RegularExpression Id. */
  int SHIFTRIGHTTEquals = 68;
  /** RegularExpression Id. */
  int AmpersandEquals = 69;
  /** RegularExpression Id. */
  int VerticalBarEquals = 70;
  /** RegularExpression Id. */
  int CaretEquals = 71;
  /** RegularExpression Id. */
  int ABSTRACT = 72;
  /** RegularExpression Id. */
  int ARGUMENTS = 73;
  /** RegularExpression Id. */
  int BOOLEAN = 74;
  /** RegularExpression Id. */
  int BREAK = 75;
  /** RegularExpression Id. */
  int BYTE = 76;
  /** RegularExpression Id. */
  int CASE = 77;
  /** RegularExpression Id. */
  int CATCH = 78;
  /** RegularExpression Id. */
  int CHAR = 79;
  /** RegularExpression Id. */
  int CLASS = 80;
  /** RegularExpression Id. */
  int CONST = 81;
  /** RegularExpression Id. */
  int CONTINUE = 82;
  /** RegularExpression Id. */
  int DEBUGGER = 83;
  /** RegularExpression Id. */
  int DELETE = 84;
  /** RegularExpression Id. */
  int DO = 85;
  /** RegularExpression Id. */
  int DOUBLE = 86;
  /** RegularExpression Id. */
  int ELSE = 87;
  /** RegularExpression Id. */
  int ENUM = 88;
  /** RegularExpression Id. */
  int EVAL = 89;
  /** RegularExpression Id. */
  int EXPORT = 90;
  /** RegularExpression Id. */
  int EXTENDS = 91;
  /** RegularExpression Id. */
  int FALSE = 92;
  /** RegularExpression Id. */
  int FINAL = 93;
  /** RegularExpression Id. */
  int FINALLY = 94;
  /** RegularExpression Id. */
  int FLOAT = 95;
  /** RegularExpression Id. */
  int FOR = 96;
  /** RegularExpression Id. */
  int FUNCTION = 97;
  /** RegularExpression Id. */
  int GOTO = 98;
  /** RegularExpression Id. */
  int IF = 99;
  /** RegularExpression Id. */
  int IMPLEMENTS = 100;
  /** RegularExpression Id. */
  int IMPORT = 101;
  /** RegularExpression Id. */
  int IN = 102;
  /** RegularExpression Id. */
  int INSTANCEOF = 103;
  /** RegularExpression Id. */
  int INT = 104;
  /** RegularExpression Id. */
  int INTERFACE = 105;
  /** RegularExpression Id. */
  int LET = 106;
  /** RegularExpression Id. */
  int LONG = 107;
  /** RegularExpression Id. */
  int NATIVE = 108;
  /** RegularExpression Id. */
  int NEW = 109;
  /** RegularExpression Id. */
  int NULL = 110;
  /** RegularExpression Id. */
  int PACKAGE = 111;
  /** RegularExpression Id. */
  int PRIVATE = 112;
  /** RegularExpression Id. */
  int PROTECTED = 113;
  /** RegularExpression Id. */
  int PUBLIC = 114;
  /** RegularExpression Id. */
  int RETURN = 115;
  /** RegularExpression Id. */
  int SHORT = 116;
  /** RegularExpression Id. */
  int STATIC = 117;
  /** RegularExpression Id. */
  int SUPER = 118;
  /** RegularExpression Id. */
  int SWITCH = 119;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 120;
  /** RegularExpression Id. */
  int THIS = 121;
  /** RegularExpression Id. */
  int THROW = 122;
  /** RegularExpression Id. */
  int THROWS = 123;
  /** RegularExpression Id. */
  int TRANSIENT = 124;
  /** RegularExpression Id. */
  int TRUE = 125;
  /** RegularExpression Id. */
  int TRY = 126;
  /** RegularExpression Id. */
  int TYPEOF = 127;
  /** RegularExpression Id. */
  int VAR = 128;
  /** RegularExpression Id. */
  int VOID = 129;
  /** RegularExpression Id. */
  int VOLATILE = 130;
  /** RegularExpression Id. */
  int WHILE = 131;
  /** RegularExpression Id. */
  int WITH = 132;
  /** RegularExpression Id. */
  int YIELD = 133;
  /** RegularExpression Id. */
  int NumericLiteral = 134;
  /** RegularExpression Id. */
  int IdentifierName = 135;
  /** RegularExpression Id. */
  int StringLiteral = 136;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<UnicodeLetter>",
    "<UnicodeDigit>",
    "<DecimalDigit>",
    "<NonZeroDigit>",
    "<DecimalDigits>",
    "<ExponentIndicator>",
    "<SignedInteger>",
    "<ExponentPart>",
    "<DecimalIntegerLiteral>",
    "<DecimalLiteral>",
    "<HexDigit>",
    "<HexIntegerLiteral>",
    "<IdentifierStart>",
    "<IdentifierPart>",
    "<SingleStringCharacter>",
    "<DoubleStringCharacter>",
    "<SingleStringCharacters>",
    "<DoubleStringCharacters>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"++\"",
    "\"--\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"!\"",
    "\"&\"",
    "\".\"",
    "\"<\"",
    "\"=\"",
    "\">\"",
    "\"?\"",
    "\":\"",
    "\"[\"",
    "\"]\"",
    "\"^\"",
    "\"{\"",
    "\"}\"",
    "\"|\"",
    "\"~\"",
    "\"<=\"",
    "\" >=\"",
    "\"==\"",
    "\"!=\"",
    "\"===\"",
    "\"!==\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
    "\"&&\"",
    "\"||\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"%=\"",
    "\"/=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"abstract\"",
    "\"arguments\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"debugger\"",
    "\"delete\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"eval\"",
    "\"export\"",
    "\"extends \"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"function\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"in\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"let\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"true\"",
    "\"try\"",
    "\"typeof\"",
    "\"var\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "\"with\"",
    "\"yield\"",
    "<NumericLiteral>",
    "<IdentifierName>",
    "<StringLiteral>",
  };

}
