/* Generated By:JavaCC: Do not edit this line. EG1TokenManager.java */
package compiler;

/** Token Manager. */
public class EG1TokenManager implements EG1Constants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfffffffffc000000L) != 0L || (active1 & 0xffffffL) != 0L)
         {
            jjmatchedKind = 89;
            return 9;
         }
         return -1;
      case 1:
         if ((active0 & 0xf0dffe7ffc000000L) != 0L || (active1 & 0xffffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 89;
               jjmatchedPos = 1;
            }
            return 9;
         }
         if ((active0 & 0xf20018000000000L) != 0L)
            return 9;
         return -1;
      case 2:
         if ((active0 & 0x9c04000000000000L) != 0L || (active1 & 0x50000L) != 0L)
            return 9;
         if ((active0 & 0x62dbff7ffc000000L) != 0L || (active1 & 0xfaffffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 89;
               jjmatchedPos = 2;
            }
            return 9;
         }
         return -1;
      case 3:
         if ((active0 & 0x4acbf17d3c000000L) != 0L || (active1 & 0xb277feL) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 3;
            return 9;
         }
         if ((active0 & 0x20100e02c0000000L) != 0L || (active1 & 0x488801L) != 0L)
            return 9;
         return -1;
      case 4:
         if ((active0 & 0x4ac831701c000000L) != 0L || (active1 & 0x1246beL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 89;
               jjmatchedPos = 4;
            }
            return 9;
         }
         if ((active0 & 0x3c00d20000000L) != 0L || (active1 & 0xa03140L) != 0L)
            return 9;
         return -1;
      case 5:
         if ((active0 & 0xa4920301c000000L) != 0L || (active1 & 0x10440eL) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 5;
            return 9;
         }
         if ((active0 & 0x4080114000000000L) != 0L || (active1 & 0x222b0L) != 0L)
            return 9;
         return -1;
      case 6:
         if ((active0 & 0xa4820300c000000L) != 0L || (active1 & 0x104408L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 6;
            return 9;
         }
         if ((active0 & 0x1000010000000L) != 0L || (active1 & 0x6L) != 0L)
            return 9;
         return -1;
      case 7:
         if ((active0 & 0xa40000008000000L) != 0L || (active1 & 0x4408L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 7;
            return 9;
         }
         if ((active0 & 0x8003004000000L) != 0L || (active1 & 0x100000L) != 0L)
            return 9;
         return -1;
      case 8:
         if ((active0 & 0x240000000000000L) != 0L || (active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 8;
            return 9;
         }
         if ((active0 & 0x800000008000000L) != 0L || (active1 & 0x4008L) != 0L)
            return 9;
         return -1;
      case 9:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 9;
            return 9;
         }
         if ((active0 & 0x240000000000000L) != 0L)
            return 9;
         return -1;
      case 10:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 10;
            return 9;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 37:
         return jjStopAtPos(0, 23);
      case 42:
         return jjStopAtPos(0, 21);
      case 43:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 45:
         jjmatchedKind = 20;
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 47:
         return jjStopAtPos(0, 22);
      case 97:
         return jjMoveStringLiteralDfa1_0(0xc000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x70000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1f80000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1e000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x3e0000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0xfc00000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xfe0000000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x3000000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0xc000000000000000L, 0x1L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1eL);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7c0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3f800L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1c0000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600000L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 43:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         break;
      case 45:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000400180000000L, active1, 0x40002L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x9000006000000000L, active1, 0x20L);
      case 102:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 53, 9);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0x203840L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000000L, active1, 0xc00000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2020400000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xe00040000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2014011810000000L, active1, 0x180000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x28000000L, active1, 0x1c00cL);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0x111L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0x20400L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x80600000000L, active1, 0x4080L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0x10L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0x800000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x280a04L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x404000000000L, active1, 0x100001L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2009801800000000L, active1, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000010000000L, active1, 0x48L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0100000000000L, active1, 0x20100L);
      case 114:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 50, 9);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 82, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x3000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x200020084000000L, active1, 0L);
      case 116:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 60, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0x4810200140000000L, active1, 0x400020L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x50000000000L, active1, 0x8000L);
      case 119:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 63, 9);
         break;
      case 121:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 80, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x3800020000000L, active1, 0x100000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000100000000L, active1, 0x400L);
      case 100:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 9);
         break;
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 9);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 9);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 9);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x800204000000000L, active1, 0x20100L);
      case 103:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 9);
         break;
      case 104:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 86, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2L);
      case 108:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 9);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000010000000L, active1, 0xa00010L);
      case 109:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 9);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000L);
      case 111:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x80100000000000L, active1, 0x3000L);
      case 114:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L);
      case 115:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x400c00000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x200001004000000L, active1, 0x288L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2008000000L, active1, 0x20L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0x6L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200L);
      case 100:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 87, 9);
         break;
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 9);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 85, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000010000000L, active1, 0x8L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0x90L);
      case 107:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 9);
         break;
      case 108:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1010000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000L);
      case 114:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x880100004000000L, active1, 0x20L);
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 9);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 9);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x8004000000000L, active1, 0x100000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0L);
      case 119:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x14000000L, active1, 0L);
      case 99:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 9);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 9);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 9);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0L);
      case 102:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 81, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0x2L);
      case 104:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0x104000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0L);
      case 110:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x200001000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400L);
      case 115:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 9);
         break;
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 9);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000004000000L, active1, 0L);
      case 101:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 65, 9);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 9);
         return jjMoveStringLiteralDfa7_0(active0, 0x40002000000000L, active1, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000L);
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 9);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0x400L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(7, 45);
         break;
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 36, 9);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 84, 9);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L, active1, 0x8L);
      case 110:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 51, 9);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L, active1, 0x4400L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 9);
         break;
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 9);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 67, 9);
         break;
      case 101:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 59, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 27, 9);
         break;
      case 116:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 78, 9);
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 57, 9);
         break;
      case 115:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 54, 9);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1);
}
static private int jjMoveStringLiteralDfa11_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(9, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(11, 74, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 32;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAddTwoStates(15, 21);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAdd(9);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(1);
                  if (curChar == 48)
                     jjAddStates(4, 5);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if (curChar == 43)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if (curChar == 45)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if (curChar != 36)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if (curChar == 48)
                     jjAddStates(4, 5);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar != 48)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(15, 21);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 17:
                  if (curChar == 43)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(18);
                  break;
               case 19:
                  if (curChar == 45)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(20);
                  break;
               case 21:
                  if (curChar != 46)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(22, 23);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 25:
                  if (curChar == 43)
                     jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if (curChar == 45)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(28);
                  break;
               case 29:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddStates(0, 3);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(30, 15);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 21);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 9:
                  if ((0x7fffffe97fffffeL & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(9);
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(6, 8);
                  break;
               case 11:
                  if (curChar == 120)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(12);
                  break;
               case 13:
                  if (curChar == 88)
                     jjCheckNAdd(12);
                  break;
               case 15:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(9, 11);
                  break;
               case 23:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(12, 14);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 32 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   30, 15, 31, 21, 11, 13, 3, 4, 6, 16, 17, 19, 24, 25, 27, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\53", "\55", "\52", "\57", "\45", "\53\53", 
"\55\55", "\141\142\163\164\162\141\143\164", "\141\162\147\165\155\145\156\164\163", 
"\142\157\157\154\145\141\156", "\142\162\145\141\153", "\142\171\164\145", "\143\141\163\145", 
"\143\141\164\143\150", "\143\150\141\162", "\143\154\141\163\163", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\142\165\147\147\145\162", "\144\145\154\145\164\145", "\144\157", 
"\144\157\165\142\154\145", "\145\154\163\145", "\145\156\165\155", "\145\166\141\154", 
"\145\170\160\157\162\164", "\145\170\164\145\156\144\163\40", "\146\141\154\163\145", 
"\146\151\156\141\154", "\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", 
"\146\165\156\143\164\151\157\156", "\147\157\164\157", "\151\146", "\151\155\160\154\145\155\145\156\164\163", 
"\151\155\160\157\162\164", "\151\156", "\151\156\163\164\141\156\143\145\157\146", "\151\156\164", 
"\151\156\164\145\162\146\141\143\145", "\154\145\164", "\154\157\156\147", "\156\141\164\151\166\145", 
"\156\145\167", "\156\165\154\154", "\160\141\143\153\141\147\145", 
"\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", 
"\162\145\164\165\162\156", "\163\150\157\162\164", "\163\164\141\164\151\143", "\163\165\160\145\162", 
"\163\167\151\164\143\150", "\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", 
"\164\150\162\157\167", "\164\150\162\157\167\163", "\164\162\141\156\163\151\145\156\164", 
"\164\162\165\145", "\164\162\171", "\164\171\160\145\157\146", "\166\141\162", 
"\166\157\151\144", "\166\157\154\141\164\151\154\145", "\167\150\151\154\145", 
"\167\151\164\150", "\171\151\145\154\144", null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffff80001L, 0x3ffffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[32];
static private final int[] jjstateSet = new int[64];
static protected char curChar;
/** Constructor. */
public EG1TokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public EG1TokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 32; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
