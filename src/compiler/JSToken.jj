/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
  static = true;
}

PARSER_BEGIN(EG1)
package compiler;

public class EG1
{
  public static void main(String args []) throws ParseException
  {
    EG1 parser = new EG1(System.in);
    parser.test();
  }
}

PARSER_END(EG1)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

TOKEN : /* Unicode */
{
  < #UnicodeLetter : ["a"-"z"]|["A"-"Z"] >
| < #UnicodeDigit : ["0"-"9"] >
}

TOKEN : /*help numbers*/
{
	< #DecimalDigit : ["0"-"9"] >
| 	< #NonZeroDigit : ["1"-"9"] >
| 	< #DecimalDigits : < DecimalDigit > ((< DecimalDigit >)+)? >
| 	< #ExponentIndicator : "e"|"E" >
|  	< #SignedInteger : < DecimalDigits > | "+" < DecimalDigits > | "-" < DecimalDigits > >
|  	< #ExponentPart : < ExponentIndicator > < SignedInteger > >
| 	< #DecimalIntegerLiteral : "0" | < NonZeroDigit > (< DecimalDigits >)? >
| 	< #DecimalLiteral :  < DecimalIntegerLiteral > "." (< DecimalDigits >)? (< ExponentPart >)?
						| "." < DecimalDigits > (< ExponentPart >)?
						| < DecimalIntegerLiteral > (< ExponentPart >)? >
|   < #HexDigit : ["0"-"9"]|["a"-"f"]|["A"-"F"] >
| 	< #HexIntegerLiteral : ("0x"|"0X") (< HexDigit >)+ >
}

TOKEN :/*help identifire*/
{
 < #IdentifierStart : < UnicodeLetter >|"$"|"_"|"\\" >
| < #IdentifierPart : < IdentifierStart > | < UnicodeLetter > | < UnicodeDigit > >
}

TOKEN :/*help string*/
{
  < #SingleStringCharacter : ~["'"] >
| < #DoubleStringCharacter : ~["\""] >
| < #SingleStringCharacters : (< SingleStringCharacter >)+ >
| < #DoubleStringCharacters : (< DoubleStringCharacter >)+ >
} 


TOKEN :  //JavaScript Arithmetic Operators
{
  < PLUS : "+" >
| < MIN : "-" >
| < MULT : "*" >
| < DIV : "/" >
| < MOD : "%" >
| < INCREMENT :"++" >
| < DECREMENT : "--" >
}

TOKEN : // Reserved Words
{
  < ABSTRACT : "abstract" >
  |< ARGUMENTS : "arguments" >
  | < BOOLEAN : "boolean" >
  | < BREAK : "break" >
  | < BYTE : "byte" >
  | < CASE : "case" >
  | < CATCH : "catch" >
  | < CHAR : "char" >
  | < CLASS : "class" >
  | < CONST : "const" >
  | < CONTINUE : "continue" >
  | < DEBUGGER : "debugger" >
  //| < DEFAULT : "default" >
  | < DELETE : "delete" >
  | < DO : "do" >
  | < DOUBLE : "double" >
  | < ELSE : "else" >
  | < ENUM : "enum" >
  | < EVAL : "eval" >
  | < EXPORT : "export" >
  | < EXTENDS : "extends " >
  | < FALSE : "false" >
  | < FINAL : "final" >
  | < FINALLY : "finally" >
  | < FLOAT : "float" >
  | < FOR : "for" >
  | < FUNCTION : "function" >
  | < GOTO : "goto" >
  | < IF : "if" >
  | < IMPLEMENTS : "implements" >
  | < IMPORT : "import" >
  | < IN : "in" >
  | < INSTANCEOF : "instanceof" >
  | < INT : "int" >
  | < INTERFACE : "interface" >
  | < LET : "let" >
  | < LONG : "long" >
  | < NATIVE : "native" >
  | < NEW : "new" >
  | < NULL : "null" >
  | < PACKAGE : "package" >
  | < PRIVATE : "private" >
  | < PROTECTED : "protected" >
  | < PUBLIC : "public" >
  | < RETURN : "return" >
  | < SHORT : "short" >
  | < STATIC : "static" >
  | < SUPER : "super" >
  | < SWITCH : "switch" >
  | < SYNCHRONIZED : "synchronized" >
  | < THIS : "this" >
  | < THROW : "throw" >
  | < THROWS : "throws" >
  | < TRANSIENT : "transient" >
  | < TRUE : "true" >
  | < TRY : "try" >
  | < TYPEOF : "typeof" >
  | < VAR : "var" >
  | < VOID : "void" >
  | < VOLATILE : "volatile" >
  | < WHILE : "while" >
  | < WITH : "with" >
  | < YIELD : "yield" >
  
}

TOKEN :
{
  < NumericLiteral : < HexIntegerLiteral > | < DecimalLiteral >> 
| < IdentifierName : < IdentifierStart > ((< IdentifierPart >)+)? >
| < StringLiteral : "'" (< SingleStringCharacters >)? "'"
					| "\"" (< DoubleStringCharacters >)? "\"" >
}

void test():
{}{    (test_())+}

void test_():
{
  Token t;}{
  (t = < NumericLiteral >
  |t = < IdentifierName >
  |t = < StringLiteral >)
  {
    System.out.println("token kind : "+t.kind);
    System.out.println("token image : "+t.image);  }}



